from data_structures.array.dynamic_multi_type_array import DynamicMultiTypeArray
from data_structures.map.pair import Pair

class HashMap:
    """
    ashMap is similar to HashTable, but it is unsynchronized.
    This class makes no guarantees as to the order of the map.
    Hash map is a widely used efficient data structure that used to store
    data which can be searched in constant time O(1). It is also referred as hash table,
    unordered map, dictionary, hash set and others.
    This data structure is implemented over an array that maps keys to values.
    Hence, hash map can be seen as a set of key value pairs.
    Each key is a number in the range of 0 to the array size â€“ 1, generated by a hash function.
    A good example for hash map is phone book. A phone book has names and phone numbers.
    In this case, the names are the keys, the phone numbers are the values.
    Imagine having a billion integers, using a search algorithm like
    linear search will take months while **hash map will take a second.
    Average CRUD operations have O(1) time complexity, but as any other
    map data structures in the worst case it may be O(N)(be honestly pretty rare).
    Collision error handling by open addressing approach.
    For more information use ".available_methods()"
    Example of Usages:
    h = HashMap()
    h.available_methods() -> list[str, str, ...]
    """
    PI = 31415926535777
    def __init__(self, load_factor: float = 0.75) -> None:
        self.capacity: int = 16
        self.array = DynamicMultiTypeArray()
        for _ in range(self.capacity): self.array.append(None)
        self.load_factor: float = load_factor
        self.threshold: int = int(self.capacity * self.load_factor)
        self.size: int = 0

    def __is_hashible(self, obj) -> None:
        """
        Function that check object on hashing opportunity.
        Raise exception if object not hashible.
        For in-class methods only.
        :param obj: object that will be hashing.
        :return: None
        """
        hash(obj)

    def __hash(self, obj) -> int:
        """
        Function that recieves object and return hash code.
        For "in-class" methods only.
        It's word particly the same as in Java hash function.
        It's guaranteed that hash code may have at most 8 possible collision.
        Raise exception if object is not hashible.
        :param obj: object that will be hashing.
        :return: int hash code
        """
        self.__is_hashible(obj)
        _obj = str(obj)
        hash_code: int = sum(ord(char) for char in _obj)
        hash_code ^= (hash_code >> 20) ^ (hash_code >> 12)
        hash_code = hash_code ^ (hash_code >> 7) ^ (hash_code >> 4)
        hash_code &= self.capacity - 1
        return hash_code

    def __resize_map(self) -> None:
        """
        Function that make resize of map threshold coefficient is max.
        For "in-class" methods only.
        :return: None
        """
        old_map = self.array
        new_capacity: int = self.capacity * 2
        new_map = DynamicMultiTypeArray()
        self.array = new_map
        self.size = 0
        for _ in range(new_capacity): self.array.append(None)
        self.capacity = new_capacity
        self.threshold = int(new_capacity * self.load_factor)
        for pair in old_map:
            if pair is not None:
                self.update(pair.key, pair.value)

    def update(self, key, value) -> None:
        """
        Function that create pair key, value in map. If key has already been in map,
        function will rewrite them by new value.
        Time Complexity - Average O(1), but in the worst case O(N).
        Example of Usages:
        m = HashMap()
        m.update('alice', 'bob') -> None
        :param key: hashible object in otherwise case function will throw exception.
        :param value: any object.
        :return: None
        """
        self.__is_hashible(key)
        index_for_inserting = self.__hash(key)
        new_item = Pair(key=key, value=value)
        while True:
            if self.array[index_for_inserting] is None:
                self.array[index_for_inserting] = new_item
                self.size += 1
                break
            elif self.array[index_for_inserting].key == new_item.key:
                self.array[index_for_inserting].value = new_item.value
                break
            index_for_inserting += 1
            index_for_inserting %= self.capacity

        if self.size >= self.threshold:
            self.__resize_map()

    def contains(self, key) -> bool:
        """
        Function that's check key in map on existing. If it is, it will return True,
        otherwise return False.
        If key not hashible, function throw an exception.
        Time complexity - Average O(1), but in the worst case O(N).
        Example of usages:
        h = HashMap()
        h.contains('bob') -> False
        :param key: key that be checked in map.
        :return: boolean either True of False
        """
        current_index = self.__hash(key)
        while current_index < self.capacity and self.array[current_index] is not None:
            if self.array[current_index] is not None:
                if self.array[current_index].key == key:
                    return True
            current_index += 1
        return False

    def __contains__(self, item):
        """
        Function that's check key in map on existing. If it is, it will return True,
        otherwise return False.
        Use for python builtin "in" method.
        If key not hashible, function throw an exception.
        Time complexity - Average O(1), but in the worst case O(N).
        Example of usages:
        h = HashMap()
        h.update('bob') -> None
        'bob' in h -> True
        :param key: key that be checked in map.
        :return: boolean either True of False
        """
        return self.contains(key=item)

    def delete(self, key) -> None:
        """
        Function that delete pair in map by given key if it exists, otherwise raise an exception.
        If key is no hashible, function will throw exception.
        Time Complexity - Average O(1), but in the worst case O(N).
        Example of Usages:
        h = HashMap()
        h.update('bob', 'here') -> None
        print(h) -> {'bob': 'here'}
        h.delete('bob') -> None
        print(h) -> {}
        :param key: key for deleting pair
        :return: None
        """
        if not self.contains(key):
            raise TypeError("Key doesnt exists in map")
        current_index = self.__hash(key)
        while current_index < self.capacity and self.array[current_index] is not None:
            if self.array[current_index] is not None:
                if self.array[current_index].key == key:
                    self.array[current_index] = None
                    self.size -= 1
                    return
            current_index += 1

    def __delitem__(self, key) -> None:
        """
        Function that delete pair in map by given key if it exists, otherwise raise an exception.
        If key is no hashible, function will throw exception.
        Use for python builtin "del" function.
        Time Complexity - Average O(1), but in the worst case O(N).
        Example of Usages:
        h = HashMap()
        h.update('bob', 'here') -> None
        print(h) -> {'bob': 'here'}
        del h['bob'] -> None
        print(h) -> {}
        :param key: key for deleting pair
        :return: None
        """
        self.delete(key=key)

    def __getitem__(self, key) -> object:
        """
        Function that will return value of pair by given key if it's exists,
        otherwise raise an exception.
        Use for python builtin methods, like indexing in square brackets and other.
        If key is not hashible function will throw an exception.
        Time Complexity O(1).
        Example of usages:
        h = HashMap()
        h.update('bob', 'here') -> None
        h['bob'] -> 'here'
        :param key: key that will be searched in map
        :return: value of pair by given key
        """
        item = self.array[self.__hash(key)]
        if item is None:
            raise KeyError("Key doesn't exists in map!")
        return item.value

    def __setitem__(self, key, value) -> None:
        """
        Function that add pair by given key, value if key doesn't exist in map,
        otherwise rewrite old pair by new value.
        Use for python builtin methods, like definition variable by square braces.
        If key is not hashible, function will throw an exception.
        Time Complexity - Average O(1), but in the worst case O(N).
        Example of usages:
        h = HashMap()
        h['bob'] = 'alice' -> None
        print(h) -> {'bob': 'alice'}
        :param key:
        :param value:
        :return:
        """
        self.update(key, value)

    def __iter__(self) -> iter:
        """
        Function that will return iterator with keys of map.
        User for python builtin functions like "iter", or "for" loop etc.
        Time complexity - O(1) because each item will return by one int the iteration.
        Example of Usages:
        h = HashMap()
        iter(h) -> iterator(h.keys())
        :return: iterator with map keys.
        """
        return iter(self.keys())

    def __reversed__(self) -> iter:
        """
        Function that will return iterator with keys of map in reversed order.
        User for python builtin functions like "iter", or "for" loop etc.
        Time complexity - O(1) because each item will return by one int the iteration.
        Example of Usages:
        h = HashMap()
        iter(h) -> iterator(h.keys())
        :return: iterator with map keys.
        """
        return reversed(self.keys())

    def get(self, key, default = None) -> object:
        """
        Function that return value of pair by given key if it's exist,
        otherwise return default value.
        Raise exception if key is not hashible.
        Time Complexity - Arevage O(1), but in the worst case O(N).
        Example of Usages:
        h = HashMap()
        h.get('bob', default='hi') -> 'hi'
        :param key: key hat will search in map.
        :param default: value thath will be returned if key doesn't exist in map, by default sets to None.
        :return: object
        """
        current_index = self.__hash(key)
        while current_index < self.capacity and self.array[current_index] is not None:
            if self.array[current_index] is not None:
                if self.array[current_index].key == key:
                    return self.array[current_index].value
            current_index += 1
        return default

    def setdefault(self, key, default = None) -> object:
        """
        Function that will return value of pair by given key if it exists,
        otherwise add pair in map by key, default value and return default value.
        Raise exception if key is not hashible.
        Time Complexity - Average O(1), but in the worst case O(N).
        Example of Usages
        h = HashMap()
        print(h) -> {}
        h.setdefault('bob', 'here') -> 'here'
        print(h) -> {'bob': 'here'}
        :param key: key that will search in map
        :param default: value that will be added in map if key doesn't exist in map.
        :return: value
        """
        current_index = self.__hash(key)
        while current_index < self.capacity and self.array[current_index] is not None:
            if self.array[current_index] is not None:
                if self.array[current_index].key == key:
                    return self.array[current_index].value
            current_index += 1
        self.update(key=key, value=default)
        return default

    def pop(self, key, default = PI) -> object:
        """
        Function that will pop and return pair by given key if it exists,
        otherwise return default value if it has given, otherwise will throw and exception.
        Raise exception if key is not hashible or map is empty.
        Time Complexity - Average O(1), but in the worst case O(N).
        Note!: Don't use default value as integer "31415926535777"!, its builtin checks,
        that default value did not given.
        Example of Usages:
        h = HashMap()
        h.pop('bob', None) -> None
        :param key: key that will search in map.
        :param default: value that will be returned if key not exist in map.
        :return: object
        """
        if self.size == 0:
            raise KeyError("Can't pop from empty map")
        current_index = self.__hash(key)
        while current_index < self.capacity and self.array[current_index] is not None:
            if self.array[current_index] is not None:
                if self.array[current_index].key == key:
                    value = self.array[current_index].value
                    self.array[current_index] = None
                    self.size -= 1
                    return value
        if default == self.PI:
            raise KeyError("Key doesn't exits in map")
        return default

    def popitem(self) -> object:
        """
        Function that remove and return (key, value) of random pair in map.
        Raise exception if map is empty.
        Time Complexity - Average O(1), but in the worst case O(N).
        Example of Usages:
        h = HashMap()
        h.update('bob', 'here') -> None
        h.popitem() -> ('bob', 'here')
        :return:
        """
        if self.size == 0:
            raise KeyError("Can't delete from empty map")
        current_index = 0
        while current_index < self.capacity:
            if self.array[current_index] is not None:
                x = (self.array[current_index].key, self.array[current_index].value)
                self.array[current_index] = None
                self.size -= 1
                return x
            current_index += 1

    def clear(self) -> None:
        """
        Function that delete all pairs in map.
        Function doesn't change current capacity size.
        Time Complexity O(N).
        Example of usages:
        h = HashMap()
        h.update('alice', 'bob') -> None
        print(h) -> {'alice': 'bob'}
        h.clear() -> None
        print(h) -> {}
        :return: None
        """
        if self.size == 0:
            return None
        for idx in range(self.capacity):
            self.array[idx] = None
        self.size = 0

    def keys(self) -> list:
        """
        Function that return list of keys of map.
        Time Complexity O(N).
        Example of Usages:
        h = HashMap()
        h.update('alice', 'bob') -> None
        h.keys() -> ['alice']
        :return: list of keys
        """
        output: list = []
        for pair in self.array:
            if pair is not None:
                output.append(pair.key)
        return output

    def values(self) -> list:
        """
        Function that return list of values of map.
        Time Complexity O(N).
        Example of Usages:
        h = HashMap()
        h.update('bob', 'alice') -> None
        h.values() -> ['alice']
        :return: list of values of map.
        """
        output: list = []
        for pair in self.array:
            if pair is not None:
                output.append(pair.value)
        return output

    def items(self) -> list[tuple]:
        """
        Function that return list of tuples in way (key, value) of map pairs.
        Time Complexity O(N).
        Example of Usages:
        h = HashMap()
        h.update('bob', 'alice') -> None
        h.items() -> [('bob', 'alice')]
        :return: list of tuples in format (key, value) of map pairs
        """
        output: list[tuple] = []
        for pair in self.array:
            if pair is not None:
                output.append((pair.key, pair.value))
        return output

    def string_representation(self, obj) -> str:
        """
        Function that return string representation of given object.
        It's uses for "in-class" methods, but you can use it for own targets.
        Time Complexity O(1).
        Example of Usages:
        h = HashMap()
        h.string_representation(1) -> '1'
        h.string_representation('alice') -> 'alice'
        :param obj: object that will convert in string type.
        :return: String representing given object.
        """
        if isinstance(obj, str):
            return f"'{obj}'"
        return str(obj)

    def __len__(self) -> int:
        """
        Function that return length of map(actual size, not capacity size!).
        Use for python builtin functions, like "len()" and etc.
        Time Complexity O(1).
        Example of Usages:
        h = HashMap()
        len(h) -> 0
        :return: int representing length of map.
        """
        return self.size

    def length(self) -> int:
        """
        Function that return length of map(actual size, not capacity size!).
        Time Complexity O(1).
        Example of usages:
        h = HashMap()
        h.length() -> None
        :return:
        """
        return self.__len__()

    def __str__(self) -> str:
        """
        Funcriont that return string representation of map.
        Next format: {key: value, ...}.
        Use for python builtin functions, like "print()" and etc.
        Time Complexity O(N).
        Example of Usages:
        h = HashMap()
        h.update('alice', 'bob') -> None
        print(h) -> {'alice': 'bob'}
        :return: string representing map
        """
        if self.size == 0:
            return '{}'
        output = [
            f"{self.string_representation(pair.key)}: {self.string_representation(pair.value)}"
            for pair in self.array if pair is not None
        ]
        return '{' + ', '.join(output) + '}'

    def available_methods(self) -> list[str]:
        """
        Function that return list names of all available methods in map.
        Example of Usages:
        h = HashMap()
        h.available_methods() -> list[str, str, ...]
        :return: list of string representing method names.
        """
        return dir(HashMap)
